<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class User extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('User_model');
    } 

    /*
     * Listing of t_user
     */
    function index()
    {
        $data['t_user'] = $this->User_model->get_all_t_user();
        $res = array();
        foreach($data['t_user'] as $row) {
			$element = new stdClass();
            $element->id = $row['id'];
            $element->name =  $row['name'];
            $element->firstname =  $row['firstname'];
            $element->email =  $row['email'];
            $element->password =  $row['password']; 

            $this->load->model('Role_model');
            $t_role = $this->Role_model->get_t_role($row['id_role']);
          
            $element->role =  $t_role['type'];
		
            $res[] = $element;	
        }


        $data['t_user'] = $res;        
      
         $data['nb_user'] = ($data['t_user'] != null && count($data['t_user']) >0 ) ? count($data['t_user']) : 0;
 
        $data['_view'] = 'user/index';
        $this->load->view('layouts/main',$data);
    }

    /*
     * Adding a new t_user
     */
    function add()
    {   
        if(isset($_POST) && count($_POST) > 0)     
        {   
            $tpass    = $this->input->post( 'password' );
		    $pass     = str_replace( ' ', '', $tpass );
            $md5pass  = md5( $pass );
            $sha1pass = sha1( $md5pass );
            $password = crypt( $sha1pass, $md5pass );
            
            $params = array(
				'id_role' => $this->input->post('id_role'),
				'name' => $this->input->post('name'),
				'firstname' => $this->input->post('firstname'),
				'email' => $this->input->post('email'),
				'password' =>  $password,
            );
            
            $t_user_id = $this->User_model->add_t_user($params);
            redirect('utilisateur');
        }
        else
        {
			$this->load->model('Role_model');
			$data['all_t_role'] = $this->Role_model->get_all_t_role();
            
            $data['_view'] = 'user/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a t_user
     */
    function edit($id)
    {   
        // check if the t_user exists before trying to edit it
        $data['t_user'] = $this->User_model->get_t_user($id);

       
        if(isset($data['t_user']['id']))
        {
            if(isset($_POST) && count($_POST) > 0)     
            {   
                $tpass    = $this->input->post( 'password' );
                $pass     = str_replace( ' ', '', $tpass );
                $md5pass  = md5( $pass );
                $sha1pass = sha1( $md5pass );
                $password = crypt( $sha1pass, $md5pass );

               
             
                $params = array(
					'id_role' => $this->input->post('id_role'),
					'name' => $this->input->post('name'),
					'firstname' => $this->input->post('firstname'),
					'email' => $this->input->post('email'),
					'password' =>  $password,
                );

                $this->User_model->update_t_user($id,$params);            
                redirect('utilisateur');
            }
            else
            {
				$this->load->model('Role_model');
				$data['all_t_role'] = $this->Role_model->get_all_t_role();

                $data['_view'] = 'user/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The t_user you are trying to edit does not exist.');
    } 

    /*
     * Deleting t_user
     */
    function remove($id)
    {
        $t_user = $this->User_model->get_t_user($id);

        // check if the t_user exists before trying to delete it
        if(isset($t_user['id']))
        {
            $this->User_model->delete_t_user($id);
            redirect('utilisateur');
        }
        else
            show_error('The t_user you are trying to delete does not exist.');
    }
    

 /*
     * Listing of t_user
     */
    function login()
    {
        $this->load->view( 'template/head' );
		$this->load->view( 'user/login' );
        // $data['_view'] = 'user/login';
        // $this->load->view('layouts/main');
    }

    /**
	 * Acces page d'adminstration
	 */
	public function access( ) {
        $this->load->helper(array('form', 'url'));
        $this->load->library('form_validation');

		$this->form_validation->set_rules( 'email', 'email', 'required' );
		$this->form_validation->set_rules( 'password', 'password', 'required|callback_verifyUser' );
               
		if ( $this->form_validation->run() == FALSE ) {
           
			$this->load->view( 'template/head' );
			$this->load->view( 'user/login' );
		} else {
			$remember = $this->input->post( 'check_session' );
           
			$tname = $this->input->post( 'email' );
			$email  = str_replace( ' ', '', $tname );
			$this->load->model( 'User_model' );
            $fname     = $this->User_model->get_fname( $email );
           
			$lname     = $this->User_model->get_lname( $email );
            $nameadmin = $fname . " " . $lname;
            
            $user = $this->User_model->get_t_user_email($tname);
            $current_id = $user["id"];

			$sessiondata = array(
				'checksession' => $this->input->post( 'check_session' ),
                'login'        => $nameadmin,
                'username'        => $tname,
                'token'  => $current_id,
				'loginuser'    => TRUE
			);

			// si case remember me est coche
			if ( $remember ) {
				$sessiondata['password']     = $this->input->post( 'password' );
				$sessiondata['checksession'] = $this->input->post( 'check_session' );
				$sessiondata['username'] = $tname;
			}
           
            $this->session->set_userdata( 'sessiondata', $sessiondata );
          
			redirect( 'dashboard' );	
		}
    }
    
    /**
	 * Callback qui verifie si login/password existe
	 */
	public function verifyUser() {
       
        $tlogin   = $this->input->post( 'email' );       
        $login    = str_replace( ' ', '', $tlogin );
       
		$tpass    = $this->input->post( 'password' );
        $pass     = str_replace( ' ', '', $tpass );
       
		$md5pass  = md5( $pass );
		$sha1pass = sha1( $md5pass );
		$password = crypt( $sha1pass, $md5pass );
       
		$this->load->model( 'User_model' );
		if ( $this->User_model->get_admin( $login, $password ) ) {
			return TRUE;
		} else {
			redirect( 'pages/authentificationfailed' );
			return FALSE;
		}
    }
    
      function logout()  
      {  
           $this->session->unset_userdata('username');  
           redirect(base_url() . 'login');  
      }  

    
    function detail($id)
    {      
       // check if the t_user exists before trying to edit it
       $data['t_user'] = $this->User_model->get_t_user($id);
       $id_role = $data['t_user']['id_role'];
       $this->load->model('Role_model');
       $data['t_role'] = $this->Role_model->get_t_role($id_role)['type'];

       if(isset($data['t_user']['id']))
       {
            $this->load->model('Role_model');
            $data['all_t_role'] = $this->Role_model->get_all_t_role();

            $data['_view'] = 'user/detail';
            $this->load->view('layouts/main',$data);
       }
       else
           show_error('The t_user you are trying to edit does not exist.');
    }

    /**	* Page d'oblie de mot de passe
		 */
		public function forgotpassword(){
            $this->load->view( 'template/head' );
			$this->load->view('template/forgotpass');
		}

    function sendforgotpassword(){ 
        $this->load->helper(array('form', 'url'));
        $this->load->library('form_validation');
        	
        $this->form_validation->set_rules('email','email','required|callback_verifyEmail');

        $email = $this->input->post('email');
        $name = $this->User_model->get_fname($email);
        $user = $this->User_model->get_t_user_email($email);
        $guid = $user["id"];
       
        

        $link = 'Madama / Monsieur, '.ucfirst($name).' ,<br>Votre dernière demande de réinitialiser de votre mot de passe pour le compte  '.ucfirst($name).'. Cliquez sur le lien ci-dessous pour le réinitialiser :<br> <a href="'.$this->config->item('base_url').'nouveauMotDePasse/?hash='.$guid.'"> Réinitialiser </a> <br> Si vous n\'avez pas demandé la réinitialisation de mot de passe, veuillez ignorer cet email.<br>Cordialement.  ' ;


        if ($this->form_validation->run() == FALSE) {
            redirect('motDePasseError');
        }
        else{
            $config = Array(
                'protocol' => 'sendmail',
                'mailtype' => 'html', 
                'charset' => 'utf-8',
                'wordwrap' => TRUE
      
            );
            $this->load->library('email', $config);
            $this->email->from( 'mediaclickdev18@gmail.com', 'NDD' );
            $this->email->to($email);
            $this->email->subject('MOT DE PASSE OUBLIÉ');
            $this->email->message($link);
            $this->email->send();
           // $this->User_model->set_token($email,$newtoken);
            redirect(base_url().'reinitMotDePasse/?hash='.$guid);
        }
    }

        /**
		 * Callback validation email
		 */
	 function verifyEmail(){
			$email = $this->input->post('email');

			if($this->User_model->get_email($email)){
				return true;
			}
			else{
				return false;
			}
		}
        
		/**
		 * Page confirmation d'obli de mot de passe
		 */
	 function forgotpasswordconfirmation(){
			 $id = $_GET['hash'];
             $data['t_user'] = $this->User_model->get_t_user($id);
          
			$this->load->view('template/forgotpassconfirmation', $data);			
    }
        
        
    /**
     * Page d'erreur d'email
     */
    public  function mailfailed(){
        $this->load->view( 'template/head' );
        $this->load->view('template/mailfailed');			
    }

    /**
     * Page de changement de mot de passe si token exist
     */
    public function npwd(){
            
        if(isset($_GET['hash'])&&!empty($_GET['hash'])){
            $id = $_GET['hash'];
            $user = $this->User_model->get_t_user($id);
            if($user){
              
                $this->load->view('template/newpass');
            }else {
                redirect('login');
            }            
        }
        else {
            redirect('login');
        }
        
    }
	/**
		 * Callback pour le changement de mot de passe
		 */
    public function newpassword(){
        $token = $this->input->post('nameuser');

        $this->load->helper(array('form', 'url'));
        $this->load->library('form_validation');
        $this->form_validation->set_rules('password','Password','required|callback_passwordcheck|min_length[8]');
        $this->form_validation->set_rules('password2','Password2','required|matches[password]');

        $pass = $this->input->post('password');
        $md5pass = md5($pass);
        $sha1pass = sha1($md5pass);
        $password = crypt($sha1pass, $md5pass);

        if ($this->form_validation->run() == FALSE) { 
            redirect('nouveauMotDePasseError/?hash='.$token);
        }
        else{
            $this->set_pass($password,$token);
        }		
    }

    /**
		 * Callback validation de mot de passe
		 */
		public function passwordcheck(){
			$password = $this->input->post('password');
		   if (preg_match('#[0-9]#', $password) && preg_match('#[a-z]#', $password) && preg_match('#[A-Z]#', $password) && preg_match('/[\'\/~`\!@#\$%\^&\*\(\)_\-\+=\{\}\[\]\|;:"\<\>,\.\?\\\]/', $password) ) {
		     return TRUE;
		   }
		   return FALSE;
		}	

    /**
	 * Met a jour le password par rapport a un $token si exist
	 */
	 function set_pass( $password, $id ) {
       
            $pass     = str_replace( ' ', '', $password );
            $md5pass  = md5( $pass );
            $sha1pass = sha1( $md5pass );
            $password = crypt( $sha1pass, $md5pass );

            $params = array(
              
                'password' =>  $password,
            );

            $params = $this->security->xss_clean( $params );
            $this->User_model->update_t_user($id,$params);   
            redirect('nouveauMotDePasseConfirmation');
	}

    /**
     * Page de confirmation de nouvelle mot de passe
     */
    public function newpasswordconfirmation(){
        $this->load->view('template/newpassconfirmation');

    }

    	/**
		 * Page d'erreur de mot de passe
		 */
		public function passwordfailed(){
			$this->load->view('template/pwdfailed');			
		}

}

